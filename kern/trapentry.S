/* See COPYRIGHT for copyright information. */

#include <inc/mmu.h>
#include <inc/memlayout.h>
#include <inc/trap.h>



###################################################################
# exceptions/interrupts
###################################################################

/* TRAPHANDLER defines a globally-visible function for handling a trap.
 * It pushes a trap number onto the stack, then jumps to _alltraps.
 * Use TRAPHANDLER for traps where the CPU automatically pushes an error code.
 *
 * You shouldn't call a TRAPHANDLER function from C, but you may
 * need to _declare_ one in C (for instance, to get a function pointer
 * during IDT setup).  You can declare the function with
 *   void NAME();
 * where NAME is the argument passed to TRAPHANDLER.
 */
#define TRAPHANDLER(name, num)						\
	.globl name;		/* define global symbol for 'name' */	\
	.type name, @function;	/* symbol type is function */		\
	.align 2;		/* align function definition */		\
	name:			/* function starts here */		\
	pushl $(num);							\
	jmp _alltraps

/* Use TRAPHANDLER_NOEC for traps where the CPU doesn't push an error code.
 * It pushes a 0 in place of the error code, so the trap frame has the same
 * format in either case.
 */
#define TRAPHANDLER_NOEC(name, num)					\
	.globl name;							\
	.type name, @function;						\
	.align 2;							\
	name:								\
	pushl $0;							\
	pushl $(num);							\
	jmp _alltraps

.text

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

/*
 * Added on April 7
 * I don't know if this works.
 * Just have a try.
 * And I find which exceptions will push error code in wiki.
 * Hopefully it's right.
 */
    TRAPHANDLER_NOEC(DIVIDE, T_DIVIDE)  ;
    TRAPHANDLER_NOEC(DEBUG, T_DEBUG)    ;
    TRAPHANDLER_NOEC(NMI, T_NMI)        ;
    TRAPHANDLER_NOEC(BRKPT, T_BRKPT)    ;
    TRAPHANDLER_NOEC(OFLOW, T_OFLOW)    ;
    TRAPHANDLER_NOEC(BOUND, T_BOUND)    ;
    TRAPHANDLER_NOEC(ILLOP, T_ILLOP)    ;
    TRAPHANDLER_NOEC(DEVICE, T_DEVICE)  ;
    TRAPHANDLER(DBLFLT, T_DBLFLT)  ;
    TRAPHANDLER(TSS, T_TSS)        ;
    TRAPHANDLER(SEGNP, T_SEGNP)    ;
    TRAPHANDLER(STACK, T_STACK)    ;
    TRAPHANDLER(GPFLT, T_GPFLT)    ;
    TRAPHANDLER(PGFLT, T_PGFLT)    ;
    TRAPHANDLER_NOEC(FPERR, T_FPERR)    ;
    TRAPHANDLER(ALIGN, T_ALIGN)    ;
    TRAPHANDLER_NOEC(MCHK, T_MCHK)      ;
    TRAPHANDLER_NOEC(SIMDERR, T_SIMDERR);
/*
 * Wiki doesn't say whether these two exceptions cause CPU pushes an error code.
 * I guess they don't.
 */
    TRAPHANDLER_NOEC(SYSCALL, T_SYSCALL);
    TRAPHANDLER_NOEC(DEFAULT, T_DEFAULT);

/*
 * Lab 3: Your code here for _alltraps
 * Added on April 7
 * I guess it use AT&T asm
 */
_alltraps:

    pushw $(0);
    pushw %ds;
    pushw $(0);
    pushw %es;
    pushal   ; /* The lab text suggests using this. It's an extremely graceful design! */
    mov $(GD_KD), %eax;
    mov %ax, %es;
    mov %ax, %ds;
    pushl %esp;
    call trap;
